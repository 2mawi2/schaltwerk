name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    # Only run for tag pushes, not manual workflow dispatch
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Node dependencies
        run: npm ci

      - name: Run full test suite
        run: npm run test

  build-macos:
    name: Build macOS Universal Binary
    runs-on: macos-latest
    # Depend on test job for tag pushes, run directly for manual dispatch
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-ci-
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules
          npm install

      # Tests run in separate workflow - releases depend on successful test runs
      # This saves ~3-4 minutes in release workflow

      - name: Build frontend
        run: npm run build

      - name: Build MCP Server with Dependencies  
        run: |
          echo "🔨 Building MCP server..."
          cd mcp-server
          npm ci --production=false
          npm run build
          # Install production dependencies for embedding
          npm ci --production --prefix .
          cd ..
          echo "✅ MCP server built with dependencies"

      - name: Build for Intel and Apple Silicon with CI profile
        env:
          MACOSX_DEPLOYMENT_TARGET: '11.0'
          # Use CI profile for much faster builds
          CARGO_PROFILE_RELEASE_LTO: 'false'
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: '256'
          CARGO_PROFILE_RELEASE_OPT_LEVEL: '2'
        run: |
          # Build both targets in parallel with optimized settings (saves 2-3 minutes)
          npm run tauri build -- --target x86_64-apple-darwin &
          PID_INTEL=$!
          npm run tauri build -- --target aarch64-apple-darwin &
          PID_ARM=$!
          
          # Wait for both builds to complete
          wait $PID_INTEL
          INTEL_STATUS=$?
          wait $PID_ARM
          ARM_STATUS=$?
          
          # Check if both builds succeeded
          if [ $INTEL_STATUS -ne 0 ] || [ $ARM_STATUS -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi

      - name: Create Universal Binary
        run: |
          # Create a universal binary app
          # Check multiple possible target directories
          TARGET_DIR="${CARGO_TARGET_DIR:-src-tauri/target}"
          
          # First check if files exist in the expected locations
          echo "🔍 Checking for app bundles..."
          
          ARM64_APP=""
          X64_APP=""
          
          # Check standard target directory first
          if [ -d "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/schaltwerk.app" ]; then
            ARM64_APP="src-tauri/target/aarch64-apple-darwin/release/bundle/macos/schaltwerk.app"
            X64_APP="src-tauri/target/x86_64-apple-darwin/release/bundle/macos/schaltwerk.app"
            echo "✅ Found apps in standard target directory"
          elif [ -d "/tmp/schaltwerk-shared-target/aarch64-apple-darwin/release/bundle/macos/schaltwerk.app" ]; then
            ARM64_APP="/tmp/schaltwerk-shared-target/aarch64-apple-darwin/release/bundle/macos/schaltwerk.app"
            X64_APP="/tmp/schaltwerk-shared-target/x86_64-apple-darwin/release/bundle/macos/schaltwerk.app"
            echo "✅ Found apps in shared target directory"
          else
            echo "❌ App bundles not found. Searching for them..."
            find . -name "schaltwerk.app" -type d 2>/dev/null || true
            find /tmp -name "schaltwerk.app" -type d 2>/dev/null || true
            exit 1
          fi
          
          echo "📱 ARM64 app: $ARM64_APP"
          echo "📱 x64 app: $X64_APP"
          
          # Copy the app bundles
          cp -R "$ARM64_APP" ./Schaltwerk-arm64.app
          cp -R "$X64_APP" ./Schaltwerk-x64.app
          
          # Create universal binary
          lipo -create \
            ./Schaltwerk-arm64.app/Contents/MacOS/schaltwerk \
            ./Schaltwerk-x64.app/Contents/MacOS/schaltwerk \
            -output ./schaltwerk-universal
          
          # Use the arm64 app as base and replace binary
          cp -R ./Schaltwerk-arm64.app ./Schaltwerk.app
          mv ./schaltwerk-universal ./Schaltwerk.app/Contents/MacOS/schaltwerk
          
          # Embed MCP server with dependencies in app bundle
          echo "📦 Embedding MCP server in app bundle..."
          mkdir -p ./Schaltwerk.app/Contents/Resources/mcp-server
          cp -R mcp-server/build ./Schaltwerk.app/Contents/Resources/mcp-server/
          cp mcp-server/package.json ./Schaltwerk.app/Contents/Resources/mcp-server/
          cp -R mcp-server/node_modules ./Schaltwerk.app/Contents/Resources/mcp-server/
          echo "✅ MCP server embedded in app bundle with dependencies"
          
          # Ad-hoc sign the universal app
          codesign --force --deep -s - ./Schaltwerk.app
          
          # Clear extended attributes
          xattr -cr ./Schaltwerk.app

      - name: Create DMG
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"
          
          # Install create-dmg if not available
          brew install create-dmg || true
          
          # Create DMG with the universal app
          create-dmg \
            --volname "Schaltwerk ${VERSION}" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "Schaltwerk.app" 150 150 \
            --app-drop-link 450 150 \
            --hide-extension "Schaltwerk.app" \
            "Schaltwerk-${VERSION}-universal.dmg" \
            "Schaltwerk.app"

      - name: Calculate checksums
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"
          shasum -a 256 "Schaltwerk-${VERSION}-universal.dmg" > checksums.txt
          cat checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: |
            Schaltwerk-*.dmg
            checksums.txt

  create-release:
    name: Create GitHub Release
    needs: build-macos
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-universal
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', github.event.inputs.version) }}
          name: Schaltwerk ${{ github.event.inputs.version || github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/*.dmg
            artifacts/checksums.txt
          body: |
            ## Installation

            ### Using Homebrew (Recommended)
            ```bash
            # Add the private tap (one-time setup)
            brew tap 2mawi2/tap https://github.com/2mawi2/homebrew-tap
            
            # Install Schaltwerk
            brew install --cask schaltwerk
            
            # Launch the application
            open -a Schaltwerk
            ```

            ### Manual Installation
            1. Download `Schaltwerk-*.dmg`
            2. Open the DMG and drag Schaltwerk to Applications
            3. On first launch, right-click and select "Open" to bypass Gatekeeper

            ## First Launch Setup
            Since the app is ad-hoc signed, macOS will require approval:
            1. Right-click Schaltwerk.app and select "Open"
            2. Click "Open" in the security dialog
            3. Or go to System Settings > Privacy & Security and click "Open Anyway"

            ## What's Changed
            - See commit history for details

  update-homebrew-tap:
    name: Update Homebrew Tap
    needs: create-release
    runs-on: ubuntu-latest
    if: github.repository == '2mawi2/schaltwerk'
    
    steps:
      - name: Checkout Homebrew tap
        uses: actions/checkout@v4
        with:
          repository: 2mawi2/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap

      - name: Download and prepare DMG
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"
          
          # Download DMG from GitHub release
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/2mawi2/schaltwerk/releases/tags/v${VERSION}" | \
            jq -r '.assets[] | select(.name | endswith(".dmg")) | .url' | \
            xargs curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/octet-stream" -o "Schaltwerk-${VERSION}-universal.dmg"
          
          # Calculate SHA256
          SHA256=$(shasum -a 256 "Schaltwerk-${VERSION}-universal.dmg" | cut -d' ' -f1)
          echo "SHA256=${SHA256}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
          # Copy DMG to homebrew-tap for distribution
          mkdir -p homebrew-tap/releases
          cp "Schaltwerk-${VERSION}-universal.dmg" homebrew-tap/releases/

      - name: Update Schaltwerk Cask
        run: |
          mkdir -p homebrew-tap/Casks
          cat > homebrew-tap/Casks/schaltwerk.rb << 'EOF'
          cask "schaltwerk" do
            version "${{ env.VERSION }}"
            sha256 "${{ env.SHA256 }}"

            url "https://github.com/2mawi2/homebrew-tap/raw/main/releases/Schaltwerk-#{version}-universal.dmg"
            name "Schaltwerk"
            desc "Visual interface for managing Para sessions"
            homepage "https://github.com/2mawi2/schaltwerk"

            app "Schaltwerk.app"

            postflight do
              # Remove quarantine attribute
              system_command "/usr/bin/xattr",
                            args: ["-cr", "#{appdir}/Schaltwerk.app"],
                            sudo: false
              
              # Ad-hoc sign if needed
              system_command "/usr/bin/codesign",
                            args: ["--force", "--deep", "-s", "-", "#{appdir}/Schaltwerk.app"],
                            sudo: false
              
              # Create wrapper script for CLI with better handling
              wrapper_script = "#{HOMEBREW_PREFIX}/bin/schaltwerk"
              File.write wrapper_script, <<~SHELL
                #!/bin/bash
                APP_PATH="#{appdir}/Schaltwerk.app"
                EXECUTABLE_PATH="$APP_PATH/Contents/MacOS/Schaltwerk"
                
                if [ $# -eq 0 ]; then
                  open "$APP_PATH"
                else
                  TARGET_DIR="$1"
                  [[ ! "$TARGET_DIR" = /* ]] && TARGET_DIR="$(pwd)/$TARGET_DIR"
                  TARGET_DIR="${TARGET_DIR%/}"
                  
                  if [ ! -d "$TARGET_DIR" ]; then
                    echo "Error: Directory not found: $TARGET_DIR" >&2
                    exit 1
                  fi
                  
                  "$EXECUTABLE_PATH" "$TARGET_DIR" &
                fi
              SHELL
              File.chmod 0755, wrapper_script
              
              ohai "Schaltwerk MCP configuration is now available through Settings → Agent Configuration → Claude tab."
            end

            zap trash: [
              "~/Library/Application Support/schaltwerk",
              "~/Library/Logs/schaltwerk",
              "~/Library/Preferences/com.mariuswichtner.schaltwerk.plist",
              "~/Library/Saved Application State/com.mariuswichtner.schaltwerk.savedState",
            ]
          end
          EOF

      - name: Commit and push
        run: |
          cd homebrew-tap
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Casks/schaltwerk.rb releases/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Schaltwerk to ${{ env.VERSION }}"
            git push
          fi
