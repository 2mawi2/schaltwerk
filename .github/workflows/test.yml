name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SCHALTWERK_PM: bun
    # For GitHub Actions, use their runner image
    # For act local testing, use our custom image via actrc config
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install system dependencies (GitHub Actions)
        # Only run on GitHub Actions, not in act (which uses pre-built image)
        if: ${{ !env.ACT }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Setup Node.js (GitHub Actions)
        # Skip in act since Node is pre-installed in custom image
        if: ${{ !env.ACT }}
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Setup Bun
        if: ${{ !env.ACT }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.16'

      - name: Setup Rust (GitHub Actions)
        # Skip in act since Rust is pre-installed in custom image
        if: ${{ !env.ACT }}
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        if: ${{ !env.ACT }}
        with:
          # Skip caching src-tauri/target because the debug artifacts exceed 2 GB and
          # the post-job tar archive started timing out after the objc2 upgrade.
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: |
          rm -rf node_modules
          node scripts/package-manager.mjs install --frozen-lockfile

          # Install MCP server dependencies
          if [ -d "mcp-server" ]; then
            echo "Installing MCP server dependencies..."
            cd mcp-server
            node ../scripts/package-manager.mjs install --frozen-lockfile
            cd ..
          fi

      - name: Run full test suite (lint, TS, MCP, clippy, frontend, MCP tests, Rust, build)
        run: node scripts/package-manager.mjs run test
